// <auto-generated />
using DneTrainNg.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DneTrainNg.TrainingDbMigrations
{
    [DbContext(typeof(TrainingDbContext))]
    [Migration("20180403065238_initForDne")]
    partial class initForDne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DneTrainNg.Models.Course", b =>
                {
                    b.Property<Guid>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseEndDate")
                        .HasMaxLength(50);

                    b.Property<string>("CourseName")
                        .IsRequired();

                    b.Property<string>("CourseStartDate")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(30);

                    b.Property<string>("LastModifiedDate")
                        .HasMaxLength(50);

                    b.Property<double>("TrainHours");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DneTrainNg.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SectionCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("DneTrainNg.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("SectionCode")
                        .HasMaxLength(10);

                    b.Property<int>("SectionId");

                    b.Property<string>("SectionName")
                        .HasMaxLength(50);

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("StudentId");

                    b.HasIndex("SectionId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DneTrainNg.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentCourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CourseId");

                    b.Property<string>("LastModifiedBy");

                    b.Property<string>("LastModifiedDate");

                    b.Property<string>("Score")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("N/A");

                    b.Property<string>("SectionCode");

                    b.Property<string>("SectionName");

                    b.Property<int>("StudentId");

                    b.Property<string>("StudentName");

                    b.HasKey("StudentCourseId");

                    b.HasIndex("CourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourses");
                });

            modelBuilder.Entity("DneTrainNg.Models.Student", b =>
                {
                    b.HasOne("DneTrainNg.Models.Section", "Section")
                        .WithMany("Students")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DneTrainNg.Models.StudentCourse", b =>
                {
                    b.HasOne("DneTrainNg.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DneTrainNg.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
